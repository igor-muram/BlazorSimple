@page "/canvas"

@inject IJSRuntime js

@inherits ComponentBase

@inject ViewModel ViewModel

@using BlazorSimple.Interfaces;

<h1>Canvas</h1>
<canvas id="canvas" width="500" height="500" @onclick="OnClickCanvas"></canvas>
<button @onclick="OnClickButton">Lines</button>


@code {

    bool isDown = false;
    MyGraphic graphic;
    bool shouldrender = true;

    protected override Task OnInitializedAsync()
    {
        graphic = new MyGraphic(js);
        ViewModel.NeedRender.Subscribe(_ => shouldrender = true);
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("Entry.startup");
        }

        await js.InvokeVoidAsync("Entry.draw");
    }

    protected override bool ShouldRender()
    {
        return base.ShouldRender();
    }

    private async Task OnClickCanvas(MouseEventArgs e)
    {
        IEnumerable<Vector3D> points = new Vector3D[] {
               new Vector3D(0.5, 0.5, 0.5),
               new Vector3D(0.5, 0.5, -0.5),
               new Vector3D(0.5, -0.5, 0.5),
               new Vector3D(0.5, -0.5, -0.5),
               new Vector3D(-0.5, 0.5, 0.5),
               new Vector3D(-0.5, 0.5, -0.5),
               new Vector3D(-0.5, -0.5, 0.5),
               new Vector3D(-0.5, -0.5, -0.5)
           };

        graphic.DrawPoints(points, Color.RED, PointTypes.CIRCLE, Thickness.Small);
        await Task.CompletedTask;
    }

    private async Task OnClickButton(MouseEventArgs e)
    {
        IList<Vector3D> vertices = new List<Vector3D>();
        vertices.Add(new Vector3D(0.5, 0.5, 0.5));
        vertices.Add(new Vector3D(-0.5, -0.5, -0.5));

        (int, int, Color)[] lines = new (int, int, Color)[1];
        lines[0] = (0, 1, Color.BLACK);

        graphic.DrawIndexedLines(vertices, lines);
    }
}