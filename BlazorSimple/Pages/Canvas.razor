@page "/canvas"

@inject IJSRuntime js

@inherits ComponentBase

@inject ViewModel ViewModel

@using BlazorSimple.Interfaces;

<h1>Canvas</h1>
<canvas id="canvas" width="1000" height="1000" @onclick="OnClickCanvas"></canvas>

<div style="display:flex; flex-direction:column">
    <CheckBox text="Hellow"></CheckBox>
    <CheckBox text="Hellow"></CheckBox>
    <CheckBox text="Hellow"></CheckBox>
    <CheckBox text="Hellow"></CheckBox>
</div>

@code {

   bool isDown = false;
   MyGraphic graphic;
   bool shouldrender = true;

   protected override Task OnInitializedAsync()
   {
       graphic = new MyGraphic(js);
       ViewModel.NeedRender.Subscribe(_ => shouldrender = true);
       return base.OnInitializedAsync();
   }

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
       if (firstRender)
       {
           await js.InvokeVoidAsync("Entry.startup");
       }

       await js.InvokeVoidAsync("Entry.draw");
   }

   protected override bool ShouldRender()
   {
       return base.ShouldRender();
   }

   private async Task OnClickCanvas(MouseEventArgs e)
   {
       IEnumerable<Vector3D> points = new Vector3D[] { new Vector3D(0.2, 0.2, 0.0), new Vector3D(0.0, 0.0, 0.0) };
       Color color = Color.BROWN;

       graphic.DrawPoints(points, color, PointTypes.CIRCLE, Thickness.Small);
       await Task.CompletedTask;
   }
}